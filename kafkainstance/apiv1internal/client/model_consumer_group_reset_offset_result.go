/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// ConsumerGroupResetOffsetResult struct for ConsumerGroupResetOffsetResult
type ConsumerGroupResetOffsetResult struct {

	Items *[]ConsumerGroupResetOffsetResultItem `json:"items,omitempty"`

	// Total number of entries in the full result set
	Total float32 `json:"total"`

	// Current page number (returned for fetch requests)
	Page *int32 `json:"page,omitempty"`

	// Number of entries per page (returned for fetch requests)
	Size *float32 `json:"size,omitempty"`

}

// NewConsumerGroupResetOffsetResult instantiates a new ConsumerGroupResetOffsetResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerGroupResetOffsetResult(total float32) *ConsumerGroupResetOffsetResult {
	this := ConsumerGroupResetOffsetResult{}
	this.Total = total
	return &this
}

// NewConsumerGroupResetOffsetResultWithDefaults instantiates a new ConsumerGroupResetOffsetResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerGroupResetOffsetResultWithDefaults() *ConsumerGroupResetOffsetResult {
	this := ConsumerGroupResetOffsetResult{}





	return &this
}


// GetItems returns the Items field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResult) GetItems() []ConsumerGroupResetOffsetResultItem {
	if o == nil || o.Items == nil {
		var ret []ConsumerGroupResetOffsetResultItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResult) GetItemsOk() (*[]ConsumerGroupResetOffsetResultItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResult) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ConsumerGroupResetOffsetResultItem and assigns it to the Items field.
func (o *ConsumerGroupResetOffsetResult) SetItems(v []ConsumerGroupResetOffsetResultItem) {
	o.Items = &v
}


// GetTotal returns the Total field value
func (o *ConsumerGroupResetOffsetResult) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResult) GetTotalOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ConsumerGroupResetOffsetResult) SetTotal(v float32) {
	o.Total = v
}


// GetPage returns the Page field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResult) GetPage() int32 {
	if o == nil || o.Page == nil {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResult) GetPageOk() (*int32, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResult) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *ConsumerGroupResetOffsetResult) SetPage(v int32) {
	o.Page = &v
}


// GetSize returns the Size field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResult) GetSize() float32 {
	if o == nil || o.Size == nil {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResult) GetSizeOk() (*float32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResult) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *ConsumerGroupResetOffsetResult) SetSize(v float32) {
	o.Size = &v
}


func (o ConsumerGroupResetOffsetResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
    
	if true {
		toSerialize["total"] = o.Total
	}
    
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
    
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
    
	return json.Marshal(toSerialize)
}

type NullableConsumerGroupResetOffsetResult struct {
	value *ConsumerGroupResetOffsetResult
	isSet bool
}

func (v NullableConsumerGroupResetOffsetResult) Get() *ConsumerGroupResetOffsetResult {
	return v.value
}

func (v *NullableConsumerGroupResetOffsetResult) Set(val *ConsumerGroupResetOffsetResult) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerGroupResetOffsetResult) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerGroupResetOffsetResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerGroupResetOffsetResult(val *ConsumerGroupResetOffsetResult) *NullableConsumerGroupResetOffsetResult {
	return &NullableConsumerGroupResetOffsetResult{value: val, isSet: true}
}

func (v NullableConsumerGroupResetOffsetResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerGroupResetOffsetResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

