/*
 * Service Registry Fleet Manager
 *
 * Managed Service Registry cloud.redhat.com API Management API that lets you create new registry instances. Registry is a datastore for standard event schemas and API designs. Service Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Registry is an Managed version of upstream project called Apicurio Registry. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.
 *
 * API version: 0.0.6
 * Contact: rhosak-eval-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registrymgmtclient

import (
	"encoding/json"
)

// RegistryListAllOf struct for RegistryListAllOf
type RegistryListAllOf struct {

	Items []Registry `json:"items"`

}

// NewRegistryListAllOf instantiates a new RegistryListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistryListAllOf(items []Registry) *RegistryListAllOf {
	this := RegistryListAllOf{}
	this.Items = items
	return &this
}

// NewRegistryListAllOfWithDefaults instantiates a new RegistryListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryListAllOfWithDefaults() *RegistryListAllOf {
	this := RegistryListAllOf{}


	return &this
}


// GetItems returns the Items field value
func (o *RegistryListAllOf) GetItems() []Registry {
	if o == nil {
		var ret []Registry
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RegistryListAllOf) GetItemsOk() (*[]Registry, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *RegistryListAllOf) SetItems(v []Registry) {
	o.Items = v
}


func (o RegistryListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if true {
		toSerialize["items"] = o.Items
	}
    
	return json.Marshal(toSerialize)
}

type NullableRegistryListAllOf struct {
	value *RegistryListAllOf
	isSet bool
}

func (v NullableRegistryListAllOf) Get() *RegistryListAllOf {
	return v.value
}

func (v *NullableRegistryListAllOf) Set(val *RegistryListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryListAllOf(val *RegistryListAllOf) *NullableRegistryListAllOf {
	return &NullableRegistryListAllOf{value: val, isSet: true}
}

func (v NullableRegistryListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

